import path from 'path';
import express from 'express';
import { createServer as createViteServer } from 'vite';
import { match } from 'node-match-path';
import { getConfigPath, getViteBuildInfo, getFilePathFromURL, getFreePort, listen } from '../utils/internal-utils.js';
import { viteCustomLogger } from '../utils/logger.js';
async function dev(serverOptions) {
    const app = express();
    const cwd = process.cwd();
    const configFile = getConfigPath(cwd);
    const { SOURCE_ENTRY_BUILD_PATH, ROOT, viteConfigObj } = await getViteBuildInfo({
        configFile,
        command: 'dev'
    });
    const freeHMRPort = await getFreePort();
    const vite = await createViteServer({
        server: { middlewareMode: true, hmr: { port: freeHMRPort } },
        appType: 'custom',
        configFile,
        optimizeDeps: {
            entries: [path.join(ROOT, 'index.abell')]
        },
        customLogger: viteCustomLogger
    });
    // use vite's connect instance as middleware
    app.use(vite.middlewares);
    app.use('*', async (req, res) => {
        var _a;
        const url = req.baseUrl;
        const abellFilePath = getFilePathFromURL(url, ROOT);
        try {
            const { makeRoutes } = await vite.ssrLoadModule(SOURCE_ENTRY_BUILD_PATH);
            const routes = await makeRoutes();
            const currentRoute = routes.find((route) => match(route.path, url).matches);
            if (!currentRoute) {
                return res
                    .status(404)
                    .set({ 'Content-Type': 'text/html' })
                    .end('not found');
            }
            const renderedContent = currentRoute.render();
            const html = await vite.transformIndexHtml(abellFilePath, renderedContent !== null && renderedContent !== void 0 ? renderedContent : '');
            return res
                .status(200)
                .set({
                'Content-Type': 'text/html',
                ...(_a = viteConfigObj.server) === null || _a === void 0 ? void 0 : _a.headers
            })
                .end(html);
        }
        catch (e) {
            // If an error is caught, let Vite fix the stracktrace so it maps back to
            // your actual source code.
            const error = e;
            const stack = error.stack;
            if (stack) {
                error.stack = vite.ssrRewriteStacktrace(stack);
            }
            console.error(error);
            const viteScript = await vite.transformIndexHtml(abellFilePath, ``);
            const errorHTML = error.message
                .replace(/\</g, '&lt;')
                .replace(/\>/g, '&gt;')
                .replace(/\n/g, '<br/>')
                .replace(/\t/g, '&nbsp;&nbsp;');
            return res
                .status(500)
                .set({ 'Content-Type': 'text/html' })
                .end(`${viteScript}${errorHTML}`);
        }
    });
    listen(app, Number(serverOptions.port));
}
export default dev;
