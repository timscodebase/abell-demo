import path from 'path';
import { transformWithEsbuild } from 'vite';
import { compile } from './compiler/index.js';
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export function vitePluginAbell(abellOptions) {
    let config;
    return {
        name: 'abell',
        configResolved(resolvedConfig) {
            config = resolvedConfig;
        },
        async transform(src, id) {
            var _a, _b;
            // This is hack for dynamic global imports. We can't do dynamic global imports in current codebase
            // resolve pages directory in default entry build
            if (id.endsWith('secret.default.entry.build.js')) {
                const abellDirPath = path
                    .relative(path.dirname(id), (_a = config.root) !== null && _a !== void 0 ? _a : process.cwd())
                    // This isn't OS separator. This is for imports in Vite which are standard '/'
                    .replaceAll(path.sep, '/');
                const entryBuildSrc = src.replace(/{{ abellPagesDir }}/g, abellDirPath);
                return { code: entryBuildSrc };
            }
            // transpile abell files into js code
            if (id.endsWith('.abell')) {
                const jsCode = compile(src, {
                    filepath: id,
                    cwd: process.cwd()
                });
                let outCode = jsCode;
                // If loader is not defined, skip the esbuild transform
                if ((_b = abellOptions === null || abellOptions === void 0 ? void 0 : abellOptions.esbuild) === null || _b === void 0 ? void 0 : _b.loader) {
                    const esbuildOut = await transformWithEsbuild(jsCode, id, abellOptions.esbuild);
                    outCode = esbuildOut.code;
                }
                return {
                    code: outCode
                };
            }
        }
    };
}
